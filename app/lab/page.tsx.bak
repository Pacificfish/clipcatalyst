[CLEAN_LAB_PAGE]

import { useEffect, useState } from 'react';
import Nav from '@/components/Nav';
import { supabase } from '@/lib/supabaseClient';
import Link from 'next/link';

type GenerateResult = {
  mp3_url?: string;
  csv_url?: string;
  project_id?: string;
  error?: string;
  details?: string;
};

export default function LabPage() {
  const [session, setSession] = useState<any>(null);
  const [mode, setMode] = useState<'Paste' | 'URL'>('Paste');
  const [source, setSource] = useState('');
  const [language, setLanguage] = useState('English');
  const [tone, setTone] = useState('Informative');
  const [topic, setTopic] = useState('');
  const [title, setTitle] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [result, setResult] = useState<GenerateResult | null>(null);

  useEffect(() => {
    supabase.auth.getSession().then(({ data }) => setSession(data.session));
    const { data: sub } = supabase.auth.onAuthStateChange((_e, s) => setSession(s));
    return () => sub.subscription.unsubscribe();
  }, []);

  // Fetch usage to show remaining credits
  useEffect(() => {
    async function loadUsage() {
      if (!session?.access_token) return;
      try {
        const res = await fetch('/api/usage', { headers: session?.access_token ? { Authorization: `Bearer ${session.access_token}` } : {} });
        const data = await res.json();
        const el = document.getElementById('credits-indicator');
        const inline = document.getElementById('credits-inline');
        if (!res.ok || data.error) {
          if (el) el.textContent = '';
          if (inline) inline.textContent = '';
        } else if (data.monthly === 'unlimited') {
          if (el) el.textContent = 'Credits: unlimited';
          if (inline) inline.textContent = 'unlimited';
        } else {
          const msg = `Credits: ${data.remaining} of ${data.monthly} left`;
          if (el) el.textContent = msg;
          if (inline) inline.textContent = `${data.remaining}/${data.monthly}`;
        }
      } catch {
        // ignore
      }
    }
    loadUsage();

    // Auto-refresh when user returns to tab (e.g., after Stripe portal)
    function onVis() { if (document.visibilityState === 'visible') loadUsage(); }
    document.addEventListener('visibilitychange', onVis);
    return () => document.removeEventListener('visibilitychange', onVis);
  }, [session?.access_token]);

  if (!session) {
    return (
      <>
        <Nav />
        <main className="container py-16">
          <div className="card p-6">Please sign in to use the Lab.</div>
        </main>
      </>
    );
  }

  const email = session?.user?.email || 'anon@example.com';
  const plan = String(session?.user?.user_metadata?.plan || '').toLowerCase();
  const devOverride = (process.env.NEXT_PUBLIC_DEV_SUB_EMAILS || '')
    .split(',')
    .map((s) => s.trim().toLowerCase())
    .filter(Boolean)
    .includes((email || '').toLowerCase());
  const hasSubscription = devOverride || ['beginner', 'pro', 'agency'].includes(plan);
  if (!hasSubscription) {
    return (
      <>
        <Nav />
        <main className="container py-16">
          <div className="card p-6 space-y-3">
            <div className="font-semibold">Subscription required</div>
            <p className="text-white/70 text-sm">Your account does not have an active plan. Choose a plan to unlock the Lab.</p>
            <div>
              <Link className="btn-primary" href="/pricing">View pricing</Link>
            </div>
          </div>
        </main>
      </>
    );
  }


  async function handleGenerate() {
    setIsLoading(true);
    setError(null);
    setResult(null);
    try {
      const body: any = {
        mode,
        language,
        tone,
        topic,
        email,
        title: title.trim(),
        project_id: `lab-${Date.now()}`,
      };
      if (mode === 'Paste') body.source_text = source.trim();
      if (mode === 'URL') body.source_url = source.trim();

      const res = await fetch('/api/generate', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          ...(session?.access_token ? { Authorization: `Bearer ${session.access_token}` } : {}),
        },
        body: JSON.stringify(body),
      });
      const data: GenerateResult = await res.json();
      if (!res.ok) throw new Error(data.error || 'Generation failed');
      setResult(data);
      // Refresh usage indicator after successful generation
      try {
        const res2 = await fetch('/api/usage', { headers: session?.access_token ? { Authorization: `Bearer ${session.access_token}` } : {} });
        const data2 = await res2.json();
        const el = document.getElementById('credits-indicator');
        const inline = document.getElementById('credits-inline');
        if (!res2.ok || data2.error) {
          if (el) el.textContent = '';
          if (inline) inline.textContent = '';
        } else if (data2.monthly === 'unlimited') {
          if (el) el.textContent = 'Credits: unlimited';
          if (inline) inline.textContent = 'unlimited';
        } else {
          const msg = `Credits: ${data2.remaining} of ${data2.monthly} left`;
          if (el) el.textContent = msg;
          if (inline) inline.textContent = `${data2.remaining}/${data2.monthly}`;
        }
      } catch {}
    } catch (e: any) {
      setError(e?.message || 'Something went wrong.');
    } finally {
      setIsLoading(false);
    }
  }

  const disabled = isLoading || !source.trim() || !title.trim();

  return (
    <>
      <Nav />
      <main className="container py-16 space-y-8">
        <header className="flex items-center justify-between">
          <h1 className="text-3xl font-bold">Lab</h1>
          <div className="flex items-center gap-3">
            <span id="credits-indicator" className="text-xs text-white/60"></span>
            <button
              onClick={async () => {
                try {
                  const res = await fetch('/api/usage', { headers: session?.access_token ? { Authorization: `Bearer ${session.access_token}` } : {} });
                  const data = await res.json();
                  const el = document.getElementById('credits-indicator');
                  const inline = document.getElementById('credits-inline');
                  if (!res.ok || data.error) {
                    if (el) el.textContent = '';
                    if (inline) inline.textContent = '';
                  } else if (data.monthly === 'unlimited') {
                    if (el) el.textContent = 'Credits: unlimited';
                    if (inline) inline.textContent = 'unlimited';
                  } else {
                    const msg = `Credits: ${data.remaining} of ${data.monthly} left`;
                    if (el) el.textContent = msg;
                    if (inline) inline.textContent = `${data.remaining}/${data.monthly}`;
                  }
                } catch {}
              }}
              className="btn"
            >Refresh</button>
            <div className="text-xs text-white/60">Signed in as {email}</div>
            {devOverride && (
              <span className="text-[10px] uppercase tracking-wide bg-emerald-500/20 text-emerald-300 ring-1 ring-emerald-500/40 px-2 py-0.5 rounded">
                Dev override active
              </span>
            )}
          </div>
        </header>

        <div className="card p-6 space-y-4">
          {/* Mode selector */}
          <div className="flex gap-2">
            <button
              className={`btn ${mode === 'Paste' ? '!bg-white/15' : ''}`}
              onClick={() => setMode('Paste')}
            >
              Paste
            </button>
            <button
              className={`btn ${mode === 'URL' ? '!bg-white/15' : ''}`}
              onClick={() => setMode('URL')}
            >
              URL
            </button>
          </div>

          {/* Title */}
          div>
            label className="flex flex-col gap-1">
              span className="text-xs text-white/60">Project title (required)/span>
              input
                className="w-full rounded-xl bg-white/5 ring-1 ring-white/10 p-3"
                placeholder="e.g., AI breakthroughs explainer"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
              />
            /label>
          /div>

          {/* Source input */}
          div>
            {mode === 'Paste' ? (
              <textarea
                className="w-full h-36 rounded-xl bg-white/5 ring-1 ring-white/10 p-3"
                placeholder="Paste source text hereâ€¦"
                value={source}
                onChange={(e) => setSource(e.target.value)}
              />
            ) : (
              <input
                type="url"
                className="w-full rounded-xl bg-white/5 ring-1 ring-white/10 p-3"
                placeholder="https://example.com/article"
                value={source}
                onChange={(e) => setSource(e.target.value)}
              />
            )}
          </div>

          {/* Options */}
          <div className="grid gap-3 sm:grid-cols-3">
            <label className="flex flex-col gap-1">
              <span className="text-xs text-white/60">Language</span>
              <input
                className="rounded-xl bg-white/5 ring-1 ring-white/10 p-2"
                value={language}
                onChange={(e) => setLanguage(e.target.value)}
                placeholder="English"
              />
            </label>
            <label className="flex flex-col gap-1">
              <span className="text-xs text-white/60">Tone</span>
              <input
                className="rounded-xl bg-white/5 ring-1 ring-white/10 p-2"
                value={tone}
                onChange={(e) => setTone(e.target.value)}
                placeholder="Informative"
              />
            </label>
            <label className="flex flex-col gap-1">
              <span className="text-xs text-white/60">Topic (optional)</span>
              <input
                className="rounded-xl bg-white/5 ring-1 ring-white/10 p-2"
                value={topic}
                onChange={(e) => setTopic(e.target.value)}
                placeholder="e.g., AI breakthroughs"
              />
            </label>
          </div>

          {/* Generate */}
                    <div className="mt-2 flex items-center gap-3">
            <button
              onClick={handleGenerate}
              disabled={disabled}
              className={`btn-primary ${disabled ? 'opacity-60 cursor-not-allowed' : ''}`}
            >
              {isLoading ? 'Generatingâ€¦' : 'Generate'}
            </button>
            <span id="credits-inline" className="text-xs text-white/60 ring-1 ring-white/10 rounded-full px-2 py-0.5"></span>
            {isLoading && <span className="text-xs text-white/60">This can take ~10â€“20sâ€¦</span>}
          </div>

          {/* Error */}
          {error && (
            <div className="rounded-lg border border-rose-400/40 bg-rose-500/10 p-3 text-sm text-rose-200">
              {error}
            </div>
          )}

          {/* Result */}
          {result && (
            <div className="pt-4 space-y-3">
              {result.mp3_url && (
                <div className="space-y-2">
                  <audio controls src={result.mp3_url} className="w-full" />
                  <a className="btn" href={result.mp3_url} target="_blank">Download MP3</a>
                </div>
              )}
              {result.csv_url && (
                <div>
                  <a className="btn" href={result.csv_url} target="_blank">Download CSV</a>
                </div>
              )}
              {result.mp3_url && result.csv_url && (
                <button
                  className="btn-primary"
                  onClick={async () => {
                    try {
                      const res = await fetch('/api/render', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ mp3_url: result.mp3_url, csv_url: result.csv_url })
                      });
                      if (!res.ok) {
                        let msg = 'Render failed';
                        try { const j = await res.json(); msg = j.error || msg; } catch {}
                        throw new Error(msg);
                      }
                      const blob = await res.blob();
                      const url = URL.createObjectURL(blob);
                      const a = document.createElement('a');
                      a.href = url;
                      a.download = `clip-${Date.now()}.mp4`;
                      document.body.appendChild(a);
                      a.click();
                      a.remove();
                      URL.revokeObjectURL(url);
                    } catch (e: any) {
                      alert(e?.message || 'Render failed');
                    }
                  }}
                >
                  Render Video
                </button>
              )}
            </div>
          )}

          {/* Previous projects grid */}
          <ProjectsGrid token={session?.access_token} />
        </div>
      </main>
    </>
  );
}

function ProjectsGrid({ token }: { token?: string }) {
  const [items, setItems] = useState<Array<{ id: string; mp3_url: string; csv_url: string; updated_at: string | null }>>([])
  const [loading, setLoading] = useState(false)
  const [err, setErr] = useState<string | null>(null)

  useEffect(() => {
    let cancelled = false
    async function load() {
      if (!token) return
      setLoading(true)
      setErr(null)
      try {
        const res = await fetch('/api/projects', { headers: { Authorization: `Bearer ${token}` } })
        const data = await res.json()
        if (!res.ok) throw new Error(data?.error || 'Failed to load projects')
        if (!cancelled) setItems(Array.isArray(data.projects) ? data.projects : [])
      } catch (e: any) {
        if (!cancelled) setErr(e?.message || 'Failed to load projects')
      } finally {
        if (!cancelled) setLoading(false)
      }
    }
    load()
    return () => { cancelled = true }
  }, [token])

  if (!token) return null

  return (
    <div className="pt-6">
      <div className="flex items-center justify-between mb-3">
        <h2 className="text-lg font-semibold">Your Projects</h2>
        {loading && <span className="text-xs text-white/60">Loadingâ€¦</span>}
        {err && <span className="text-xs text-rose-300">{err}</span>}
      </div>
      {items.length === 0 ? (
        <div className="text-sm text-white/60">No projects yet. Generate one above.</div>
      ) : (
        <div className="grid gap-3 sm:grid-cols-2 lg:grid-cols-3">
          {items.map(p => (
            <div key={p.id} className="rounded-xl ring-1 ring-white/10 p-4 bg-white/5 space-y-2">
              <div className="text-sm font-medium truncate">{p.id}</div>
              <div className="text-xs text-white/60">{p.updated_at ? new Date(p.updated_at).toLocaleString() : ''}</div>
              <div className="flex gap-2 pt-1">
                <a className="btn" href={p.mp3_url} target="_blank">MP3</a>
                <a className="btn" href={p.csv_url} target="_blank">CSV</a>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  )
}
